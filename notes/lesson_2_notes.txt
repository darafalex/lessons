OK the first lesson we learned to open a window in gosu
we learned to draw a player inside the game window
we learned to move this player around the game window
and we limited its movement to just the bounds of the game window.

Now we are ready to add more excitement to the game.

How about if we play dodge ball with our player.
We can have a ball that appears as if thrown into the
game window and our player dodges the ball by moving
with the arrow keys.

So let's try that. First let's find a picture of a ball
we can use.

So we create a new file for our dodge ball. We will call this file ball.rb

and inside of it, we will have our familiar

class Ball
  def initialize(game_window)
    @game_window = game_window

  end
  
  def update
  end

  def draw
  end

end

then we will make this ball come from the top of the screen 
and from random places it should go down

we accomplish this by setting the initial position @x to a random number
between 0 and the width of the game window in pixels.

@x = rand(@game_window.width)

this means that when the game starts the random method will give us a postion
somewhere between 0 and the width of the game window

the @y position for this ball will be 0 since it is at the top during initialize.

now with each update, we need to make the ball move down, so 
let's say the ball moves 1 pixel with every udpate. we will see how fast that is.

we do this in the update, we change the @y position by 1 pixel like this

@y = @y -1

as we have learned, we need to trap for when the ball goes out of the screen.
if the ball goes beyond the screen, we want to start again, find a random position
from the top of the screen and drop the ball again.

so we can do this by adding our familiar if statement like this

if @y > @game_window.height
  @y = 0
else
  @y = @y - 1
end

now we will do something else, we want the ball to start dropping from another position
not the same x position as before. So in the line where we reset @y to 0, we also 
change the @x position to be another random position like this

@x = rand(@game_window.width)

OK, let's see if this works.
====================================

The ball goes down as expected, we now need to make sure that if the ball hits the player, the game stops. How do we do this?

back to our update method. In the update method, we can write a method
to check for this and stop the game if hit.

distance between ball and the player


if @player1.hit_by? @ball
  stop_the_game
end



if Gosu::distance(@x, @y, star.x, star.y) < 35

end
