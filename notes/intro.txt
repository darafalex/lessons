start your command line
make a directory, let's call it my_game
then go that directory by typing cd my_game
now we open that directory with our text editor by typing mate my_game

once in this view we will create our first file by right clicking on the folder and asking for a new file
we will call the file my_game.rb

this is the file that will contain our first program.

we will use the gosu library 

we will do this by typing

require 'gosu'

then we will start our game by inheriting from the gosu class

we will call our game

class MyGame < Gosu::Window
end

now inside of this class, gosu needs us to define three methods:

we do this like this:

class MyGame < Gosu::Window

def initialize
end

def update
end

def draw
end

end

what happens here is that when the game starts, the initialize method is called.

then the game stays running and it goes in a loop calling the methods: update and draw

update, then draw, update then draw, update then draw. Like this several times a second.


OK so we are almost ready to run this code. The next step that we need to do now is tell gosu how big a window we want for the game.

we do this in the initialize method, by passing it three parameters like this

def initialize(300, 300, false)
end

what this does is make the window 300 pixels wide by 300 pixels high. A pixel is a single dot in your screen. If you put your face right next to the display you can almost see the dots
those are called pixels. 

The third parameter you pass to the initialize method is false. This tells gosu not to take over the whole sreen. I hate when games just take over your whole screen. So we will say false for this.

OK, let's see if this works. Let's run this.

To run what we have so far, we have to use the class we just defined in our program.

We do this by adding the following after the class definition.

window = MyGame.new
window.show

the first line creates an instance of the new game, and the show method tells the game to show the game window.

we are ready to run the program now.

we save what we have so far, then we go to the command line and tell the program to run like this:

> ruby my_game.rb

if everything worked correctly, you will have seen your screen show up. You have written your first program!

Granted this does not do anything exciting, but at least you now know how to open a window in a computer game.

The next step will be to add objects to the game.

PLAYER
so it will be good to have a player in the game. So let's create one.

We do this by adding a new file. I will call it player.rb, so I right click on the folder and type player.rb

now I will define what my player will do.

We do this by typing

class Player
  def initialize(game_window)
  @game_window = game_window
  end
end

next we will add an icon to this player so that we can see it on the screen

we do this by finding a .png picture, I happen to have a picture of an icon and I will place it on 
an images folder in my game folder. I do this by right clicking on the game folder icon and 
selecting new folder.
then I call it images
then I drag my image to the screen.

next I go to my player class and I add this icon to it. I do this by typing the following

def initialize(game_window)
@game_window = game_window
@icon = Gosu::Image.new(@game_window, "images/player1.png", true)
end

then we add a draw method to the player, we do this by typing

def draw
  @icon.draw(50,50,1)
end

now almost ready to try this again. I need to go to my first file first and I need to 
instantiate this player.

I do this by typing

in the initialize method

@player1 = Player.new(game_window)

this tells the player which window to draw itself on

then we add

@player1.draw in the draw method of the game window.

this will draw the player when the game is running.

Let's try it.


 







